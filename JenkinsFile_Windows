pipeline
{
	agent any
	environment
	{
		scannerHome = tool name: 'sonar_scanner_dotnet', type: 'hudson.plugins.sonar.MsBuildSQRunnerInstallation'   
	}
	
	options
   	{
      		timeout(time: 1, unit: 'HOURS')

		// Discard old builds after 5 days or 5 builds count.
		buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '5'))

		//To avoid concurrent builds to avoid multiple checkouts
		disableConcurrentBuilds()
   	}
	stages
	{
		stage ('checkout')
		{
			steps
			{
				echo  " ********** Clone starts ******************"
				checkout scm
			}
		}
		stage ('nuget')
		{
			steps
			{
				echo "************ restoring dependancies **********"
				bat label: '', script: 'dotnet restore'
			}
		}
		stage ('Start sonarqube analysis')
		{
			steps
			{
				echo "*********** starting sonar analysis ***********"
				withSonarQubeEnv('Test_Sonar')
				{
					bat """
					dotnet "${scannerHome}\\SonarScanner.MSBuild.dll" begin /k:$JOB_NAME /n:$JOB_NAME /v:1.0 
					"""
				}
                
			}
		}
		stage ('build')
		{
			steps
			{
				echo "************* building the solution **********"
				bat "dotnet build -c Release -o WebApplication4\\app\\build"
			}	
		}
		stage ('SonarQube Analysis end')
		{	
			steps
			{
				echo "*************** Executing Sonar analysis ***********"
				withSonarQubeEnv('Test_Sonar')
				{
					bat """
					dotnet "${scannerHome}\\SonarScanner.MSBuild.dll" end
					"""
				}
			}
		}
		stage ('Release Artifacts')
		{
			steps
			{
				echo "************** Publishing app ***************"
				bat """
				rmdir /s /q WebApplication4\\app\\publish>NUL
				dotnet publish -c Release -o WebApplication4\\app\\publish
				"""
			}
		}
		stage ('Docker Image')
		{
			steps
			{
				echo "****************** Build Docker image ****************"
				withCredentials([usernamePassword(credentialsId: 'DockerHubCred', passwordVariable: 'pass', usernameVariable: 'user')]) {
					bat """
					docker build --no-cache -t $user/sample.core.app:%JOB_NAME%_%BUILD_NUMBER% .
					"""
				}
			}
		}
		stage ('Push to DTR')
		{
			steps
			{
				echo "***************** Pushing image to Docker Hub **********"
				withCredentials([usernamePassword(credentialsId: 'DockerHubCred', passwordVariable: 'pass', usernameVariable: 'user')]) {
					bat """
					docker login -u $user -p $pass
					docker push $user/sample.core.app:%JOB_NAME%_%BUILD_NUMBER%
					"""
				}
			}
		}
		stage ('Stop Running container')
		{
			steps
			{
				echo "*************** Removing already running conatiners *****************"
				bat """
					@echo off
					ECHO ***Start***
					ECHO Check for running container
					docker ps>Containers

					for /f "tokens=1" %%b in ('FINDSTR "5006" Containers') do (
						ECHO Container Id: %%b
						SET ContainerId=%%b
						IF NOT [%ContainerId%] == [] GOTO :StopAndRemoveContainer
					)
					ECHO No running container found
					ECHO Check for all container
					docker ps -all>Containers

					for /f "tokens=1" %%a in ('FINDSTR "5006" Containers') do (
						ECHO Container Id: %%a
						SET ContainerId=%%a
						IF NOT [%ContainerId%] == [] GOTO :RemoveContainer
					)
					ECHO No container found
					GOTO :END
					:StopAndRemoveContainer
					docker stop %ContainerId%
					ECHO Container Stoped
					:RemoveContainer
					docker rm -f %ContainerId%
					ECHO Container Removed

					:END
					ECHO ***End***
				"""
			}
		}
		stage ('Docker deployment')
		{
			steps
			{
			   echo "*************** Deploying latest version on Docker Containers **************"
			   withCredentials([usernamePassword(credentialsId: 'DockerHubCred', passwordVariable: 'pass', usernameVariable: 'user')]) {
			   	bat """
				docker run --name sample.core.app -d -p 5006:80 $user/sample.core.app:%JOB_NAME%_%BUILD_NUMBER%
				"""
			   }
			}
		}
	}

	 post 
	 {
		always 
		{
			echo "*********** Executing post tasks like Email notifications *****************"
		}
	}
}
