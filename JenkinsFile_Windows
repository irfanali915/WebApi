pipeline
{
	agent any
	environment
	{
		scannerHome = tool name: 'sonar_scanner_dotnet', type: 'hudson.plugins.sonar.MsBuildSQRunnerInstallation'   
	}
	
	options
   	{
      		timeout(time: 1, unit: 'HOURS')

		// Discard old builds after 5 days or 5 builds count.
		buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '5'))

		//To avoid concurrent builds to avoid multiple checkouts
		disableConcurrentBuilds()
   	}
	stages
	{
		stage ('checkout')
		{
			steps
			{
				echo  " ********** Clone starts ******************"
				//checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'b88ca4e2-c290-4634-b441-77891f0979fe', url: 'https://github.com/irfanali915/WebApi.git']]])
				checkout scm
			}
		}
		stage ('nuget')
		{
			steps
			{
				echo "************ restoring dependancies **********"
				bat label: '', script: 'dotnet restore'
			}
		}
		stage ('Start sonarqube analysis')
		{
			steps
			{
				echo "*********** starting sonar analysis ***********"
				withSonarQubeEnv('Test_Sonar')
				{
					bat """
					SET scannerHome=${scannerHome}
					dotnet "%scannerHome%\\SonarScanner.MSBuild.dll" begin /k:$JOB_NAME /n:$JOB_NAME /v:1.0 
					"""
				}
                
			}
		}
		stage ('build')
		{
			steps
			{
				echo "************* building the solution **********"
				bat "dotnet build -c Release -o WebApplication4/app/build"
			}	
		}
		stage ('SonarQube Analysis end')
		{	
			steps
			{
				echo "*************** Executing Sonar analysis ***********"
				withSonarQubeEnv('Test_Sonar')
				{
					bat """
					dotnet "${scannerHome}\\SonarScanner.MSBuild.dll" end
					"""
				}
			}
		}
		stage ('Release Artifacts')
		{
			steps
			{
				echo "************** Publishing app ***************"
				bat "dotnet publish -c Release -o WebApplication4/app/publish"
			}
		}
		stage ('Docker Image')
		{
			steps
			{
				echo "****************** Build Docker image ****************"
				sh returnStdout: true, script: '/bin/docker build --no-cache -t dtr.nagarro.com:443/dotnetcoreapp_irfanali:${BUILD_NUMBER} .'
			}
		}
		stage ('Push to DTR')
		{
			steps
			{
				echo "***************** Pushing image to Nagarro DTR or Docker Hub **********"
				sh returnStdout: true, script: '/bin/docker push dtr.nagarro.com:443/dotnetcoreapp_irfanali:${BUILD_NUMBER}'
			}
		}
		stage ('Stop Running container')
		{
			steps
			{
				echo "*************** Removing already running conatiners *****************"
				sh '''
                ContainerID=$(docker ps | grep 5006 | cut -d " " -f 1)
                if [  $ContainerID ]
                then
                    docker stop $ContainerID
                    docker rm -f $ContainerID
                fi
            '''
			}
		}
		stage ('Docker deployment')
		{
			steps
			{
			   echo "*************** Deploying latest war on Docker Containers **************"
			   sh 'docker run --name dotnetcoreapp_irfanali -d -p 5006:80 dtr.nagarro.com:443/dotnetcoreapp_irfanali:${BUILD_NUMBER}'
			}
		}
	}

	 post {
			always 
			{
				echo "*********** Executing post tasks like Email notifications *****************"
			}
		}
}
